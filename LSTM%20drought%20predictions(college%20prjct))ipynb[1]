{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled41.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMaoTk9kTbAbIkyvfggA67o",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jayeshraj619/AI-LAB/blob/master/predvalu.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 519,
      "metadata": {
        "id": "8bHTZ-1X--G6"
      },
      "outputs": [],
      "source": [
        "# Importing the required libraries\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"/content/spi12.csv\")\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 867
        },
        "id": "xz5yk-Jz_K9c",
        "outputId": "71441b9c-a917-493f-d1b2-fcfc42af4b87"
      },
      "execution_count": 520,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           date    maxtemp         rh  surface soil wetness  \\\n",
              "0    01-04-1981  34.617742  69.223548              0.462258   \n",
              "1    01-05-1981  31.033667  79.617667              0.593333   \n",
              "2    01-06-1981  28.703871  84.991935              0.768065   \n",
              "3    01-07-1981  26.794000  89.955333              0.913667   \n",
              "4    01-08-1981  26.825806  90.236452              0.888065   \n",
              "..          ...        ...        ...                   ...   \n",
              "484  01-08-2021  27.496129  90.606452              0.879032   \n",
              "485  01-09-2021  27.498387  90.168065              0.863548   \n",
              "486  01-10-2021  27.804667  90.775667              0.886000   \n",
              "487  01-11-2021  27.357097  90.686129              0.945484   \n",
              "488  01-12-2021  27.673333  89.432667              0.953333   \n",
              "\n",
              "     root zone soil wetness   profile soil moisture       sl1       sl2  \\\n",
              "0                  0.484194                0.479677 -0.183742 -0.614220   \n",
              "1                  0.583333                0.568000  0.378890 -0.183742   \n",
              "2                  0.737097                0.709355  1.104113  0.378890   \n",
              "3                  0.930333                0.904333  1.219897  1.104113   \n",
              "4                  0.901935                0.869677  0.541595  1.219897   \n",
              "..                      ...                     ...       ...       ...   \n",
              "484                0.890323                0.860323  0.464589  0.439844   \n",
              "485                0.864839                0.832581  0.561400  0.464589   \n",
              "486                0.892000                0.859000  0.774938  0.561400   \n",
              "487                0.962258                0.945806  1.487056  0.774938   \n",
              "488                0.972667                0.960333  1.473047  1.487056   \n",
              "\n",
              "          sl3     spi12  \n",
              "0   -0.429082  0.378890  \n",
              "1   -0.614220  1.104113  \n",
              "2   -0.183742  1.219897  \n",
              "3    0.378890  0.541595  \n",
              "4    1.104113  0.671709  \n",
              "..        ...       ...  \n",
              "484  1.712501  0.561400  \n",
              "485  0.439844  0.774938  \n",
              "486  0.464589  1.487056  \n",
              "487  0.561400  1.473047  \n",
              "488  0.774938 -0.624426  \n",
              "\n",
              "[489 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4c08d016-49ba-4fe1-91bd-3883164e70ce\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>maxtemp</th>\n",
              "      <th>rh</th>\n",
              "      <th>surface soil wetness</th>\n",
              "      <th>root zone soil wetness</th>\n",
              "      <th>profile soil moisture</th>\n",
              "      <th>sl1</th>\n",
              "      <th>sl2</th>\n",
              "      <th>sl3</th>\n",
              "      <th>spi12</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>01-04-1981</td>\n",
              "      <td>34.617742</td>\n",
              "      <td>69.223548</td>\n",
              "      <td>0.462258</td>\n",
              "      <td>0.484194</td>\n",
              "      <td>0.479677</td>\n",
              "      <td>-0.183742</td>\n",
              "      <td>-0.614220</td>\n",
              "      <td>-0.429082</td>\n",
              "      <td>0.378890</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>01-05-1981</td>\n",
              "      <td>31.033667</td>\n",
              "      <td>79.617667</td>\n",
              "      <td>0.593333</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>0.568000</td>\n",
              "      <td>0.378890</td>\n",
              "      <td>-0.183742</td>\n",
              "      <td>-0.614220</td>\n",
              "      <td>1.104113</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>01-06-1981</td>\n",
              "      <td>28.703871</td>\n",
              "      <td>84.991935</td>\n",
              "      <td>0.768065</td>\n",
              "      <td>0.737097</td>\n",
              "      <td>0.709355</td>\n",
              "      <td>1.104113</td>\n",
              "      <td>0.378890</td>\n",
              "      <td>-0.183742</td>\n",
              "      <td>1.219897</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>01-07-1981</td>\n",
              "      <td>26.794000</td>\n",
              "      <td>89.955333</td>\n",
              "      <td>0.913667</td>\n",
              "      <td>0.930333</td>\n",
              "      <td>0.904333</td>\n",
              "      <td>1.219897</td>\n",
              "      <td>1.104113</td>\n",
              "      <td>0.378890</td>\n",
              "      <td>0.541595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>01-08-1981</td>\n",
              "      <td>26.825806</td>\n",
              "      <td>90.236452</td>\n",
              "      <td>0.888065</td>\n",
              "      <td>0.901935</td>\n",
              "      <td>0.869677</td>\n",
              "      <td>0.541595</td>\n",
              "      <td>1.219897</td>\n",
              "      <td>1.104113</td>\n",
              "      <td>0.671709</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>484</th>\n",
              "      <td>01-08-2021</td>\n",
              "      <td>27.496129</td>\n",
              "      <td>90.606452</td>\n",
              "      <td>0.879032</td>\n",
              "      <td>0.890323</td>\n",
              "      <td>0.860323</td>\n",
              "      <td>0.464589</td>\n",
              "      <td>0.439844</td>\n",
              "      <td>1.712501</td>\n",
              "      <td>0.561400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>485</th>\n",
              "      <td>01-09-2021</td>\n",
              "      <td>27.498387</td>\n",
              "      <td>90.168065</td>\n",
              "      <td>0.863548</td>\n",
              "      <td>0.864839</td>\n",
              "      <td>0.832581</td>\n",
              "      <td>0.561400</td>\n",
              "      <td>0.464589</td>\n",
              "      <td>0.439844</td>\n",
              "      <td>0.774938</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>486</th>\n",
              "      <td>01-10-2021</td>\n",
              "      <td>27.804667</td>\n",
              "      <td>90.775667</td>\n",
              "      <td>0.886000</td>\n",
              "      <td>0.892000</td>\n",
              "      <td>0.859000</td>\n",
              "      <td>0.774938</td>\n",
              "      <td>0.561400</td>\n",
              "      <td>0.464589</td>\n",
              "      <td>1.487056</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>487</th>\n",
              "      <td>01-11-2021</td>\n",
              "      <td>27.357097</td>\n",
              "      <td>90.686129</td>\n",
              "      <td>0.945484</td>\n",
              "      <td>0.962258</td>\n",
              "      <td>0.945806</td>\n",
              "      <td>1.487056</td>\n",
              "      <td>0.774938</td>\n",
              "      <td>0.561400</td>\n",
              "      <td>1.473047</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>488</th>\n",
              "      <td>01-12-2021</td>\n",
              "      <td>27.673333</td>\n",
              "      <td>89.432667</td>\n",
              "      <td>0.953333</td>\n",
              "      <td>0.972667</td>\n",
              "      <td>0.960333</td>\n",
              "      <td>1.473047</td>\n",
              "      <td>1.487056</td>\n",
              "      <td>0.774938</td>\n",
              "      <td>-0.624426</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>489 rows × 10 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c08d016-49ba-4fe1-91bd-3883164e70ce')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4c08d016-49ba-4fe1-91bd-3883164e70ce button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4c08d016-49ba-4fe1-91bd-3883164e70ce');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 520
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "del df[\"date\"]"
      ],
      "metadata": {
        "id": "ntq0nS4s_ac4"
      },
      "execution_count": 521,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error , mean_squared_error\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.preprocessing import LabelEncoder"
      ],
      "metadata": {
        "id": "eFAPzqOE_b4P"
      },
      "execution_count": 522,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "id": "o-k1qcjyze8y",
        "outputId": "3331341d-8dc2-4438-8454-c141a2de5e8f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 523,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['maxtemp', 'rh', 'surface soil wetness', 'root zone soil wetness',\n",
              "       ' profile soil moisture', 'sl1', 'sl2', 'sl3', 'spi12'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 523
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Scaling the entire dataset\n",
        "\n",
        "dataset = df\n",
        "values = dataset.values\n",
        "\n",
        "#values = values.astype('float32')\n",
        "\n",
        "scaler = MinMaxScaler(feature_range=(0, 1))\n",
        "scaled = scaler.fit_transform(df[['maxtemp', 'rh', 'surface soil wetness', 'root zone soil wetness',\n",
        "       ' profile soil moisture', 'sl1', 'sl2', 'sl3', 'spi12']])\n",
        "print(scaled.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xPUBu7bo_d1G",
        "outputId": "b0663904-628b-41c9-b234-1a7de284d67e"
      },
      "execution_count": 525,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(489, 9)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "SAR66ZZ9ZnI2"
      },
      "execution_count": 148,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tf = pd.DataFrame(scaled, columns = [['maxtemp', 'rh', 'surface soil wetness', 'root zone soil wetness',\n",
        "       ' profile soil moisture', 'sl1', 'sl2', 'sl3', 'spi12']])\n",
        "tf"
      ],
      "metadata": {
        "id": "awem_9f_w35C",
        "outputId": "2763a6b2-1c9a-4b61-b481-31e1d43083ac",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 502
        }
      },
      "execution_count": 527,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      maxtemp        rh surface soil wetness root zone soil wetness  \\\n",
              "0    0.749464  0.422834             0.392848               0.131861   \n",
              "1    0.444210  0.679236             0.554906               0.308057   \n",
              "2    0.245783  0.811808             0.770939               0.581333   \n",
              "3    0.083120  0.934244             0.950957               0.924763   \n",
              "4    0.085829  0.941179             0.919303               0.874293   \n",
              "..        ...       ...                  ...                    ...   \n",
              "484  0.142920  0.950306             0.908136               0.853654   \n",
              "485  0.143112  0.939492             0.888992               0.808363   \n",
              "486  0.169198  0.954480             0.916751               0.856635   \n",
              "487  0.131079  0.952272             0.990295               0.981501   \n",
              "488  0.158012  0.921351             1.000000               1.000000   \n",
              "\n",
              "     profile soil moisture       sl1       sl2       sl3     spi12  \n",
              "0                 0.117296  0.399851  0.280857  0.332033  0.555375  \n",
              "1                 0.279497  0.555375  0.399851  0.280857  0.755843  \n",
              "2                 0.539089  0.755843  0.555375  0.399851  0.787849  \n",
              "3                 0.897158  0.787849  0.755843  0.555375  0.600350  \n",
              "4                 0.833514  0.600350  0.787849  0.755843  0.636317  \n",
              "..                     ...       ...       ...       ...       ...  \n",
              "484               0.816335  0.579064  0.572224  0.924015  0.605825  \n",
              "485               0.765388  0.605825  0.579064  0.572224  0.664852  \n",
              "486               0.813906  0.664852  0.605825  0.579064  0.861697  \n",
              "487               0.973322  0.861697  0.664852  0.605825  0.857825  \n",
              "488               1.000000  0.857825  0.861697  0.664852  0.278036  \n",
              "\n",
              "[489 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fa12b9c3-73e3-4b81-9b6f-d24cf1310e05\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>maxtemp</th>\n",
              "      <th>rh</th>\n",
              "      <th>surface soil wetness</th>\n",
              "      <th>root zone soil wetness</th>\n",
              "      <th>profile soil moisture</th>\n",
              "      <th>sl1</th>\n",
              "      <th>sl2</th>\n",
              "      <th>sl3</th>\n",
              "      <th>spi12</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.749464</td>\n",
              "      <td>0.422834</td>\n",
              "      <td>0.392848</td>\n",
              "      <td>0.131861</td>\n",
              "      <td>0.117296</td>\n",
              "      <td>0.399851</td>\n",
              "      <td>0.280857</td>\n",
              "      <td>0.332033</td>\n",
              "      <td>0.555375</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.444210</td>\n",
              "      <td>0.679236</td>\n",
              "      <td>0.554906</td>\n",
              "      <td>0.308057</td>\n",
              "      <td>0.279497</td>\n",
              "      <td>0.555375</td>\n",
              "      <td>0.399851</td>\n",
              "      <td>0.280857</td>\n",
              "      <td>0.755843</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.245783</td>\n",
              "      <td>0.811808</td>\n",
              "      <td>0.770939</td>\n",
              "      <td>0.581333</td>\n",
              "      <td>0.539089</td>\n",
              "      <td>0.755843</td>\n",
              "      <td>0.555375</td>\n",
              "      <td>0.399851</td>\n",
              "      <td>0.787849</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.083120</td>\n",
              "      <td>0.934244</td>\n",
              "      <td>0.950957</td>\n",
              "      <td>0.924763</td>\n",
              "      <td>0.897158</td>\n",
              "      <td>0.787849</td>\n",
              "      <td>0.755843</td>\n",
              "      <td>0.555375</td>\n",
              "      <td>0.600350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.085829</td>\n",
              "      <td>0.941179</td>\n",
              "      <td>0.919303</td>\n",
              "      <td>0.874293</td>\n",
              "      <td>0.833514</td>\n",
              "      <td>0.600350</td>\n",
              "      <td>0.787849</td>\n",
              "      <td>0.755843</td>\n",
              "      <td>0.636317</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>484</th>\n",
              "      <td>0.142920</td>\n",
              "      <td>0.950306</td>\n",
              "      <td>0.908136</td>\n",
              "      <td>0.853654</td>\n",
              "      <td>0.816335</td>\n",
              "      <td>0.579064</td>\n",
              "      <td>0.572224</td>\n",
              "      <td>0.924015</td>\n",
              "      <td>0.605825</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>485</th>\n",
              "      <td>0.143112</td>\n",
              "      <td>0.939492</td>\n",
              "      <td>0.888992</td>\n",
              "      <td>0.808363</td>\n",
              "      <td>0.765388</td>\n",
              "      <td>0.605825</td>\n",
              "      <td>0.579064</td>\n",
              "      <td>0.572224</td>\n",
              "      <td>0.664852</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>486</th>\n",
              "      <td>0.169198</td>\n",
              "      <td>0.954480</td>\n",
              "      <td>0.916751</td>\n",
              "      <td>0.856635</td>\n",
              "      <td>0.813906</td>\n",
              "      <td>0.664852</td>\n",
              "      <td>0.605825</td>\n",
              "      <td>0.579064</td>\n",
              "      <td>0.861697</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>487</th>\n",
              "      <td>0.131079</td>\n",
              "      <td>0.952272</td>\n",
              "      <td>0.990295</td>\n",
              "      <td>0.981501</td>\n",
              "      <td>0.973322</td>\n",
              "      <td>0.861697</td>\n",
              "      <td>0.664852</td>\n",
              "      <td>0.605825</td>\n",
              "      <td>0.857825</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>488</th>\n",
              "      <td>0.158012</td>\n",
              "      <td>0.921351</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.857825</td>\n",
              "      <td>0.861697</td>\n",
              "      <td>0.664852</td>\n",
              "      <td>0.278036</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>489 rows × 9 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fa12b9c3-73e3-4b81-9b6f-d24cf1310e05')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fa12b9c3-73e3-4b81-9b6f-d24cf1310e05 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fa12b9c3-73e3-4b81-9b6f-d24cf1310e05');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 527
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "values = tf.values\n",
        "\n",
        "# We train the model on the 1st 3 years and then test on the last year (for now)\n",
        "n_train_hours = 389\n",
        "\n",
        "train = values[:n_train_hours, :]\n",
        "test = values[n_train_hours:, :]\n",
        "\n",
        "# split into input and outputs\n",
        "train_X, train_y = train[:, :-1], train[:, -1]\n",
        "test_X, test_y = test[:, :-1], test[:, -1]\n",
        "\n",
        "# reshape input to be 3D :- (no.of samples, no.of timesteps, no.of features)\n",
        "train_X = train_X.reshape((train_X.shape[0], 1, train_X.shape[1]))\n",
        "test_X = test_X.reshape((test_X.shape[0], 1, test_X.shape[1]))\n",
        "print(train_X.shape, train_y.shape, test_X.shape, test_y.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l9X2Ck6e_m80",
        "outputId": "2a263499-fd3f-4337-9584-37965f1177da"
      },
      "execution_count": 529,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(389, 1, 8) (389,) (100, 1, 8) (100,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.shape, test.shape, values.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ECy4RmtZ_otD",
        "outputId": "7927283a-e9a8-430c-aa9d-8bd07b0cef61"
      },
      "execution_count": 485,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((390, 8), (100, 8), (490, 8))"
            ]
          },
          "metadata": {},
          "execution_count": 485
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.layers import LSTM, Dense, Dropout, BatchNormalization,GRU\n",
        "from tensorflow.keras.models import Sequential"
      ],
      "metadata": {
        "id": "yf-evbCY_qky"
      },
      "execution_count": 530,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Sequential()\n",
        "model.add(LSTM(1000, input_shape=(train_X.shape[1], train_X.shape[2])))\n",
        "model.add(Dropout(0.8))\n",
        "model.add(Dense(1))\n",
        "model.compile(loss='mse', optimizer='adam')\n",
        "model.summary()\n",
        "# fit network\n",
        "history = model.fit(train_X, train_y, epochs=70, batch_size=25, validation_split=0.2, verbose=2, shuffle=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uO_0UFgG_sTS",
        "outputId": "4c074e7a-5cae-4344-a336-58ba09800046"
      },
      "execution_count": 531,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_20\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " lstm_20 (LSTM)              (None, 1000)              4036000   \n",
            "                                                                 \n",
            " dropout_20 (Dropout)        (None, 1000)              0         \n",
            "                                                                 \n",
            " dense_20 (Dense)            (None, 1)                 1001      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 4,037,001\n",
            "Trainable params: 4,037,001\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Epoch 1/70\n",
            "13/13 - 3s - loss: 0.0951 - val_loss: 0.0495 - 3s/epoch - 260ms/step\n",
            "Epoch 2/70\n",
            "13/13 - 1s - loss: 0.0552 - val_loss: 0.0374 - 551ms/epoch - 42ms/step\n",
            "Epoch 3/70\n",
            "13/13 - 1s - loss: 0.0470 - val_loss: 0.0338 - 542ms/epoch - 42ms/step\n",
            "Epoch 4/70\n",
            "13/13 - 1s - loss: 0.0421 - val_loss: 0.0305 - 553ms/epoch - 43ms/step\n",
            "Epoch 5/70\n",
            "13/13 - 1s - loss: 0.0402 - val_loss: 0.0298 - 547ms/epoch - 42ms/step\n",
            "Epoch 6/70\n",
            "13/13 - 1s - loss: 0.0385 - val_loss: 0.0277 - 545ms/epoch - 42ms/step\n",
            "Epoch 7/70\n",
            "13/13 - 1s - loss: 0.0359 - val_loss: 0.0269 - 545ms/epoch - 42ms/step\n",
            "Epoch 8/70\n",
            "13/13 - 1s - loss: 0.0330 - val_loss: 0.0256 - 538ms/epoch - 41ms/step\n",
            "Epoch 9/70\n",
            "13/13 - 1s - loss: 0.0345 - val_loss: 0.0248 - 556ms/epoch - 43ms/step\n",
            "Epoch 10/70\n",
            "13/13 - 1s - loss: 0.0339 - val_loss: 0.0241 - 547ms/epoch - 42ms/step\n",
            "Epoch 11/70\n",
            "13/13 - 1s - loss: 0.0341 - val_loss: 0.0238 - 577ms/epoch - 44ms/step\n",
            "Epoch 12/70\n",
            "13/13 - 1s - loss: 0.0317 - val_loss: 0.0232 - 544ms/epoch - 42ms/step\n",
            "Epoch 13/70\n",
            "13/13 - 1s - loss: 0.0312 - val_loss: 0.0232 - 555ms/epoch - 43ms/step\n",
            "Epoch 14/70\n",
            "13/13 - 1s - loss: 0.0308 - val_loss: 0.0225 - 575ms/epoch - 44ms/step\n",
            "Epoch 15/70\n",
            "13/13 - 1s - loss: 0.0295 - val_loss: 0.0232 - 544ms/epoch - 42ms/step\n",
            "Epoch 16/70\n",
            "13/13 - 1s - loss: 0.0286 - val_loss: 0.0224 - 534ms/epoch - 41ms/step\n",
            "Epoch 17/70\n",
            "13/13 - 1s - loss: 0.0315 - val_loss: 0.0226 - 553ms/epoch - 43ms/step\n",
            "Epoch 18/70\n",
            "13/13 - 1s - loss: 0.0307 - val_loss: 0.0223 - 548ms/epoch - 42ms/step\n",
            "Epoch 19/70\n",
            "13/13 - 1s - loss: 0.0276 - val_loss: 0.0226 - 545ms/epoch - 42ms/step\n",
            "Epoch 20/70\n",
            "13/13 - 1s - loss: 0.0299 - val_loss: 0.0224 - 549ms/epoch - 42ms/step\n",
            "Epoch 21/70\n",
            "13/13 - 1s - loss: 0.0277 - val_loss: 0.0223 - 547ms/epoch - 42ms/step\n",
            "Epoch 22/70\n",
            "13/13 - 1s - loss: 0.0314 - val_loss: 0.0224 - 547ms/epoch - 42ms/step\n",
            "Epoch 23/70\n",
            "13/13 - 1s - loss: 0.0280 - val_loss: 0.0223 - 537ms/epoch - 41ms/step\n",
            "Epoch 24/70\n",
            "13/13 - 1s - loss: 0.0284 - val_loss: 0.0227 - 549ms/epoch - 42ms/step\n",
            "Epoch 25/70\n",
            "13/13 - 1s - loss: 0.0297 - val_loss: 0.0222 - 547ms/epoch - 42ms/step\n",
            "Epoch 26/70\n",
            "13/13 - 1s - loss: 0.0284 - val_loss: 0.0223 - 558ms/epoch - 43ms/step\n",
            "Epoch 27/70\n",
            "13/13 - 1s - loss: 0.0280 - val_loss: 0.0223 - 549ms/epoch - 42ms/step\n",
            "Epoch 28/70\n",
            "13/13 - 1s - loss: 0.0283 - val_loss: 0.0224 - 562ms/epoch - 43ms/step\n",
            "Epoch 29/70\n",
            "13/13 - 1s - loss: 0.0288 - val_loss: 0.0228 - 572ms/epoch - 44ms/step\n",
            "Epoch 30/70\n",
            "13/13 - 1s - loss: 0.0289 - val_loss: 0.0223 - 559ms/epoch - 43ms/step\n",
            "Epoch 31/70\n",
            "13/13 - 1s - loss: 0.0288 - val_loss: 0.0227 - 557ms/epoch - 43ms/step\n",
            "Epoch 32/70\n",
            "13/13 - 1s - loss: 0.0281 - val_loss: 0.0222 - 559ms/epoch - 43ms/step\n",
            "Epoch 33/70\n",
            "13/13 - 1s - loss: 0.0290 - val_loss: 0.0221 - 548ms/epoch - 42ms/step\n",
            "Epoch 34/70\n",
            "13/13 - 1s - loss: 0.0270 - val_loss: 0.0220 - 549ms/epoch - 42ms/step\n",
            "Epoch 35/70\n",
            "13/13 - 1s - loss: 0.0287 - val_loss: 0.0224 - 559ms/epoch - 43ms/step\n",
            "Epoch 36/70\n",
            "13/13 - 1s - loss: 0.0280 - val_loss: 0.0221 - 540ms/epoch - 42ms/step\n",
            "Epoch 37/70\n",
            "13/13 - 1s - loss: 0.0299 - val_loss: 0.0220 - 553ms/epoch - 43ms/step\n",
            "Epoch 38/70\n",
            "13/13 - 1s - loss: 0.0286 - val_loss: 0.0224 - 536ms/epoch - 41ms/step\n",
            "Epoch 39/70\n",
            "13/13 - 1s - loss: 0.0277 - val_loss: 0.0223 - 563ms/epoch - 43ms/step\n",
            "Epoch 40/70\n",
            "13/13 - 1s - loss: 0.0282 - val_loss: 0.0222 - 541ms/epoch - 42ms/step\n",
            "Epoch 41/70\n",
            "13/13 - 1s - loss: 0.0290 - val_loss: 0.0220 - 589ms/epoch - 45ms/step\n",
            "Epoch 42/70\n",
            "13/13 - 1s - loss: 0.0281 - val_loss: 0.0220 - 548ms/epoch - 42ms/step\n",
            "Epoch 43/70\n",
            "13/13 - 1s - loss: 0.0268 - val_loss: 0.0220 - 547ms/epoch - 42ms/step\n",
            "Epoch 44/70\n",
            "13/13 - 1s - loss: 0.0262 - val_loss: 0.0220 - 555ms/epoch - 43ms/step\n",
            "Epoch 45/70\n",
            "13/13 - 1s - loss: 0.0278 - val_loss: 0.0221 - 537ms/epoch - 41ms/step\n",
            "Epoch 46/70\n",
            "13/13 - 1s - loss: 0.0285 - val_loss: 0.0221 - 558ms/epoch - 43ms/step\n",
            "Epoch 47/70\n",
            "13/13 - 1s - loss: 0.0279 - val_loss: 0.0219 - 553ms/epoch - 43ms/step\n",
            "Epoch 48/70\n",
            "13/13 - 1s - loss: 0.0260 - val_loss: 0.0219 - 549ms/epoch - 42ms/step\n",
            "Epoch 49/70\n",
            "13/13 - 1s - loss: 0.0279 - val_loss: 0.0224 - 567ms/epoch - 44ms/step\n",
            "Epoch 50/70\n",
            "13/13 - 1s - loss: 0.0271 - val_loss: 0.0220 - 548ms/epoch - 42ms/step\n",
            "Epoch 51/70\n",
            "13/13 - 1s - loss: 0.0260 - val_loss: 0.0220 - 578ms/epoch - 44ms/step\n",
            "Epoch 52/70\n",
            "13/13 - 1s - loss: 0.0270 - val_loss: 0.0220 - 547ms/epoch - 42ms/step\n",
            "Epoch 53/70\n",
            "13/13 - 1s - loss: 0.0253 - val_loss: 0.0219 - 546ms/epoch - 42ms/step\n",
            "Epoch 54/70\n",
            "13/13 - 1s - loss: 0.0271 - val_loss: 0.0218 - 540ms/epoch - 42ms/step\n",
            "Epoch 55/70\n",
            "13/13 - 1s - loss: 0.0259 - val_loss: 0.0220 - 550ms/epoch - 42ms/step\n",
            "Epoch 56/70\n",
            "13/13 - 1s - loss: 0.0261 - val_loss: 0.0218 - 536ms/epoch - 41ms/step\n",
            "Epoch 57/70\n",
            "13/13 - 1s - loss: 0.0268 - val_loss: 0.0221 - 557ms/epoch - 43ms/step\n",
            "Epoch 58/70\n",
            "13/13 - 1s - loss: 0.0265 - val_loss: 0.0218 - 540ms/epoch - 42ms/step\n",
            "Epoch 59/70\n",
            "13/13 - 1s - loss: 0.0271 - val_loss: 0.0218 - 562ms/epoch - 43ms/step\n",
            "Epoch 60/70\n",
            "13/13 - 1s - loss: 0.0281 - val_loss: 0.0218 - 545ms/epoch - 42ms/step\n",
            "Epoch 61/70\n",
            "13/13 - 1s - loss: 0.0279 - val_loss: 0.0218 - 546ms/epoch - 42ms/step\n",
            "Epoch 62/70\n",
            "13/13 - 1s - loss: 0.0277 - val_loss: 0.0221 - 552ms/epoch - 42ms/step\n",
            "Epoch 63/70\n",
            "13/13 - 1s - loss: 0.0258 - val_loss: 0.0220 - 561ms/epoch - 43ms/step\n",
            "Epoch 64/70\n",
            "13/13 - 1s - loss: 0.0269 - val_loss: 0.0219 - 541ms/epoch - 42ms/step\n",
            "Epoch 65/70\n",
            "13/13 - 1s - loss: 0.0261 - val_loss: 0.0219 - 555ms/epoch - 43ms/step\n",
            "Epoch 66/70\n",
            "13/13 - 1s - loss: 0.0268 - val_loss: 0.0217 - 559ms/epoch - 43ms/step\n",
            "Epoch 67/70\n",
            "13/13 - 1s - loss: 0.0274 - val_loss: 0.0219 - 576ms/epoch - 44ms/step\n",
            "Epoch 68/70\n",
            "13/13 - 1s - loss: 0.0259 - val_loss: 0.0219 - 575ms/epoch - 44ms/step\n",
            "Epoch 69/70\n",
            "13/13 - 1s - loss: 0.0274 - val_loss: 0.0217 - 541ms/epoch - 42ms/step\n",
            "Epoch 70/70\n",
            "13/13 - 1s - loss: 0.0267 - val_loss: 0.0217 - 559ms/epoch - 43ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(15,6))\n",
        "plt.plot(history.history['loss'], label='train', linewidth = 2.5)\n",
        "plt.plot(history.history['val_loss'], label='test',  linewidth = 2.5)\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "wpHZaop7_uif",
        "outputId": "8ee1981c-98db-4873-bfec-9c5a2310f448"
      },
      "execution_count": 532,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_X.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wSOGcRNa_w2H",
        "outputId": "9154111c-577f-4776-b7b7-c5e694b5b643"
      },
      "execution_count": 542,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(100, 1, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 542
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "testPredict = model.predict(test_X)\n",
        "print(testPredict.shape)\n",
        "testPredict = testPredict.ravel()\n",
        "\n",
        "print(testPredict.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lGTRDn46_ygv",
        "outputId": "d62a8d39-8cc4-4721-9f91-0f0a31927ab4"
      },
      "execution_count": 543,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(100, 1)\n",
            "(100,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test_true = test[:,8]"
      ],
      "metadata": {
        "id": "Aby6R10T_z9p"
      },
      "execution_count": 544,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#poll = np.array(df['spi3'])\n",
        "#print(poll.shape)\n",
        "#meanop = poll.mean()\n",
        "#stdop = poll.std()\n",
        "#print(testPredict.shape)\n",
        "#y_test_true = y_test_true*stdop + meanop\n",
        "#testPredict = testPredict*stdop + meanop\n",
        "\n",
        "#testPredict.shape"
      ],
      "metadata": {
        "id": "ne1q2T1U_1hw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a209cd35-ec6e-46be-b2fa-3dc543d78639"
      },
      "execution_count": 244,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(490,)\n",
            "(100, 1)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(100, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 244
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib import pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(15,6))\n",
        "plt.xlim([0,50])\n",
        "plt.ylabel(\"spi\")\n",
        "plt.xlabel(\"months\")\n",
        "\n",
        "plt.plot(y_test_true, c = \"g\", alpha = 0.90, linewidth = 2.5)\n",
        "plt.plot(testPredict, c = \"b\", alpha = 0.75)\n",
        "plt.title(\"Testing(Validation) data\")\n",
        "plt.show()\n",
        "#testPredict=testPredict.reshape(-1,1)\n",
        "print(testPredict.shape)\n",
        "#testTrue = scaler.inverse_transform(testPredict)"
      ],
      "metadata": {
        "id": "NxuzHShCJjy_",
        "outputId": "b40944f6-db5a-4241-ebc5-b73ebec3eaf0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 372
        }
      },
      "execution_count": 545,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(100,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import r2_score\n",
        "r=r2_score(y_test_true, testPredict)\n",
        "print(\"r2socre =\"  ,r)\n",
        "rmse = np.sqrt(mean_squared_error(y_test_true, testPredict))\n",
        "print(\"Test(Validation) RMSE =\"  ,rmse)"
      ],
      "metadata": {
        "id": "_rMlGWbDJnD2",
        "outputId": "df4234cf-9d25-4515-befa-b62d4b1a0e28",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 546,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "r2socre = 0.5024791286686745\n",
            "Test(Validation) RMSE = 0.137738692909993\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "testPredict"
      ],
      "metadata": {
        "id": "HPGvYMXg51KH",
        "outputId": "918e2c1b-c962-49de-afdc-4237e2eecb4f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 547,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.39116466, 0.45910197, 0.5116885 , 0.465202  , 0.22636628,\n",
              "       0.21053097, 0.36651227, 0.2927836 , 0.6805503 , 0.57120544,\n",
              "       0.5380405 , 0.61595756, 0.5935313 , 0.40697268, 0.46776506,\n",
              "       0.36996755, 0.31159332, 0.18401667, 0.25052086, 0.46895942,\n",
              "       0.64174175, 0.62367207, 0.5339394 , 0.4232666 , 0.4815141 ,\n",
              "       0.5791869 , 0.54088885, 0.44987124, 0.27790722, 0.20872065,\n",
              "       0.38245812, 0.4997786 , 0.56119215, 0.6951193 , 0.54650193,\n",
              "       0.46039683, 0.45569116, 0.43779132, 0.6030891 , 0.40641013,\n",
              "       0.2549966 , 0.2477205 , 0.26379165, 0.5728279 , 0.5499994 ,\n",
              "       0.6548582 , 0.5931837 , 0.48909035, 0.5602763 , 0.538505  ,\n",
              "       0.51591134, 0.44088754, 0.19428109, 0.19252476, 0.20321226,\n",
              "       0.49079534, 0.61262953, 0.66617996, 0.6008212 , 0.57352483,\n",
              "       0.4688722 , 0.46203938, 0.4611551 , 0.36109525, 0.2206575 ,\n",
              "       0.16836375, 0.31556216, 0.37225005, 0.55395633, 0.59855014,\n",
              "       0.6025278 , 0.59272844, 0.5891277 , 0.4748793 , 0.50301343,\n",
              "       0.3883607 , 0.3392985 , 0.2282163 , 0.3288683 , 0.41373616,\n",
              "       0.5763096 , 0.69055855, 0.5150606 , 0.53680956, 0.46955845,\n",
              "       0.5016951 , 0.44181427, 0.42574206, 0.38369358, 0.37442344,\n",
              "       0.24397749, 0.4496012 , 0.6725554 , 0.6822949 , 0.4438627 ,\n",
              "       0.45391324, 0.51245725, 0.5402171 , 0.58206296, 0.5387276 ],\n",
              "      dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 547
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gf = pd.DataFrame(testPredict) \n",
        "gf"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "N6hC6CNfOVRR",
        "outputId": "f39917ed-689a-4e61-974c-3281b01a49cb"
      },
      "execution_count": 548,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           0\n",
              "0   0.391165\n",
              "1   0.459102\n",
              "2   0.511688\n",
              "3   0.465202\n",
              "4   0.226366\n",
              "..       ...\n",
              "95  0.453913\n",
              "96  0.512457\n",
              "97  0.540217\n",
              "98  0.582063\n",
              "99  0.538728\n",
              "\n",
              "[100 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eb2ee36d-f342-4734-9e86-a806b525c660\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.391165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.459102</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.511688</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.465202</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.226366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>0.453913</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>0.512457</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>0.540217</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>0.582063</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>0.538728</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb2ee36d-f342-4734-9e86-a806b525c660')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-eb2ee36d-f342-4734-9e86-a806b525c660 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-eb2ee36d-f342-4734-9e86-a806b525c660');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 548
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sf = pd.read_csv(\"/content/test12.csv\")\n",
        "\n",
        "#values = sf.values\n",
        "\n",
        "#values = values.astype('float32')\n",
        "\n",
        "\n",
        "sf\n",
        "scaler = MinMaxScaler(feature_range=(0, 1))\n",
        "sf = scaler.fit_transform(sf)\n",
        "sf=pd.DataFrame(sf)\n",
        "print(sf)\n",
        "sf[8]=gf\n",
        "sf\n"
      ],
      "metadata": {
        "id": "civoepuXLbBu",
        "outputId": "d9bc8040-a00f-4429-9461-6dc1db4008b1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 916
        }
      },
      "execution_count": 549,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "           0         1         2         3         4         5         6  \\\n",
            "0   0.047475  0.946182  0.873467  0.825557  0.788811  0.455179  0.764801   \n",
            "1   0.108600  0.887871  0.814170  0.727708  0.684040  0.509287  0.455179   \n",
            "2   0.109383  0.854242  0.800075  0.681014  0.639283  0.578640  0.509287   \n",
            "3   0.126971  0.787991  0.851839  0.771963  0.726294  0.634797  0.578640   \n",
            "4   0.148064  0.593310  0.639682  0.506135  0.481822  0.151399  0.634797   \n",
            "..       ...       ...       ...       ...       ...       ...       ...   \n",
            "95  0.065350  0.954469  0.888049  0.848160  0.810782  0.583748  0.575494   \n",
            "96  0.065573  0.941219  0.864719  0.801169  0.758295  0.616040  0.583748   \n",
            "97  0.095825  0.959583  0.898547  0.851253  0.808280  0.687268  0.616040   \n",
            "98  0.051617  0.956877  0.988173  0.980807  0.972515  0.924801  0.687268   \n",
            "99  0.082853  0.918992  1.000000  1.000000  1.000000  0.920128  0.924801   \n",
            "\n",
            "           7         8  \n",
            "0   0.924627  0.509287  \n",
            "1   0.764801  0.578640  \n",
            "2   0.455179  0.634797  \n",
            "3   0.509287  0.151399  \n",
            "4   0.578640  0.150984  \n",
            "..       ...       ...  \n",
            "95  1.000000  0.616040  \n",
            "96  0.575494  0.687268  \n",
            "97  0.583748  0.924801  \n",
            "98  0.616040  0.920128  \n",
            "99  0.687268  0.220497  \n",
            "\n",
            "[100 rows x 9 columns]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           0         1         2         3         4         5         6  \\\n",
              "0   0.047475  0.946182  0.873467  0.825557  0.788811  0.455179  0.764801   \n",
              "1   0.108600  0.887871  0.814170  0.727708  0.684040  0.509287  0.455179   \n",
              "2   0.109383  0.854242  0.800075  0.681014  0.639283  0.578640  0.509287   \n",
              "3   0.126971  0.787991  0.851839  0.771963  0.726294  0.634797  0.578640   \n",
              "4   0.148064  0.593310  0.639682  0.506135  0.481822  0.151399  0.634797   \n",
              "..       ...       ...       ...       ...       ...       ...       ...   \n",
              "95  0.065350  0.954469  0.888049  0.848160  0.810782  0.583748  0.575494   \n",
              "96  0.065573  0.941219  0.864719  0.801169  0.758295  0.616040  0.583748   \n",
              "97  0.095825  0.959583  0.898547  0.851253  0.808280  0.687268  0.616040   \n",
              "98  0.051617  0.956877  0.988173  0.980807  0.972515  0.924801  0.687268   \n",
              "99  0.082853  0.918992  1.000000  1.000000  1.000000  0.920128  0.924801   \n",
              "\n",
              "           7         8  \n",
              "0   0.924627  0.391165  \n",
              "1   0.764801  0.459102  \n",
              "2   0.455179  0.511688  \n",
              "3   0.509287  0.465202  \n",
              "4   0.578640  0.226366  \n",
              "..       ...       ...  \n",
              "95  1.000000  0.453913  \n",
              "96  0.575494  0.512457  \n",
              "97  0.583748  0.540217  \n",
              "98  0.616040  0.582063  \n",
              "99  0.687268  0.538728  \n",
              "\n",
              "[100 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-351f30fc-1f37-4ef2-9a01-22ee02b0cbdb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.047475</td>\n",
              "      <td>0.946182</td>\n",
              "      <td>0.873467</td>\n",
              "      <td>0.825557</td>\n",
              "      <td>0.788811</td>\n",
              "      <td>0.455179</td>\n",
              "      <td>0.764801</td>\n",
              "      <td>0.924627</td>\n",
              "      <td>0.391165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.108600</td>\n",
              "      <td>0.887871</td>\n",
              "      <td>0.814170</td>\n",
              "      <td>0.727708</td>\n",
              "      <td>0.684040</td>\n",
              "      <td>0.509287</td>\n",
              "      <td>0.455179</td>\n",
              "      <td>0.764801</td>\n",
              "      <td>0.459102</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.109383</td>\n",
              "      <td>0.854242</td>\n",
              "      <td>0.800075</td>\n",
              "      <td>0.681014</td>\n",
              "      <td>0.639283</td>\n",
              "      <td>0.578640</td>\n",
              "      <td>0.509287</td>\n",
              "      <td>0.455179</td>\n",
              "      <td>0.511688</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.126971</td>\n",
              "      <td>0.787991</td>\n",
              "      <td>0.851839</td>\n",
              "      <td>0.771963</td>\n",
              "      <td>0.726294</td>\n",
              "      <td>0.634797</td>\n",
              "      <td>0.578640</td>\n",
              "      <td>0.509287</td>\n",
              "      <td>0.465202</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.148064</td>\n",
              "      <td>0.593310</td>\n",
              "      <td>0.639682</td>\n",
              "      <td>0.506135</td>\n",
              "      <td>0.481822</td>\n",
              "      <td>0.151399</td>\n",
              "      <td>0.634797</td>\n",
              "      <td>0.578640</td>\n",
              "      <td>0.226366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>0.065350</td>\n",
              "      <td>0.954469</td>\n",
              "      <td>0.888049</td>\n",
              "      <td>0.848160</td>\n",
              "      <td>0.810782</td>\n",
              "      <td>0.583748</td>\n",
              "      <td>0.575494</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.453913</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>0.065573</td>\n",
              "      <td>0.941219</td>\n",
              "      <td>0.864719</td>\n",
              "      <td>0.801169</td>\n",
              "      <td>0.758295</td>\n",
              "      <td>0.616040</td>\n",
              "      <td>0.583748</td>\n",
              "      <td>0.575494</td>\n",
              "      <td>0.512457</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>0.095825</td>\n",
              "      <td>0.959583</td>\n",
              "      <td>0.898547</td>\n",
              "      <td>0.851253</td>\n",
              "      <td>0.808280</td>\n",
              "      <td>0.687268</td>\n",
              "      <td>0.616040</td>\n",
              "      <td>0.583748</td>\n",
              "      <td>0.540217</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>0.051617</td>\n",
              "      <td>0.956877</td>\n",
              "      <td>0.988173</td>\n",
              "      <td>0.980807</td>\n",
              "      <td>0.972515</td>\n",
              "      <td>0.924801</td>\n",
              "      <td>0.687268</td>\n",
              "      <td>0.616040</td>\n",
              "      <td>0.582063</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>0.082853</td>\n",
              "      <td>0.918992</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.920128</td>\n",
              "      <td>0.924801</td>\n",
              "      <td>0.687268</td>\n",
              "      <td>0.538728</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 9 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-351f30fc-1f37-4ef2-9a01-22ee02b0cbdb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-351f30fc-1f37-4ef2-9a01-22ee02b0cbdb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-351f30fc-1f37-4ef2-9a01-22ee02b0cbdb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 549
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "testPredict=testPredict.reshape(-1,1)\n",
        "testTrue = scaler.inverse_transform(sf)\n",
        "testTrue"
      ],
      "metadata": {
        "id": "J1JM1SRG5CzH",
        "outputId": "d069f1c5-74c2-4368-8158-ef0aa8cb1bf6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 550,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 2.73151613e+01,  9.03322581e+01,  8.69354839e-01,\n",
              "         8.78064516e-01,  8.48709677e-01,  7.91427870e-02,\n",
              "         1.00738153e+00,  1.48653332e+00, -1.12769879e-01],\n",
              "       [ 2.79340000e+01,  8.84030000e+01,  8.30000000e-01,\n",
              "         8.25000000e-01,  7.93333333e-01,  2.41356985e-01,\n",
              "         7.91427870e-02,  1.00738153e+00,  9.09042246e-02],\n",
              "       [ 2.79419355e+01,  8.72903226e+01,  8.20645161e-01,\n",
              "         7.99677419e-01,  7.69677419e-01,  4.49274771e-01,\n",
              "         2.41356985e-01,  7.91427870e-02,  2.48557018e-01],\n",
              "       [ 2.81200000e+01,  8.50983333e+01,  8.55000000e-01,\n",
              "         8.49000000e-01,  8.15666667e-01,  6.17633832e-01,\n",
              "         4.49274771e-01,  2.41356985e-01,  1.09191934e-01],\n",
              "       [ 2.83335484e+01,  7.86570968e+01,  7.14193548e-01,\n",
              "         7.04838710e-01,  6.86451613e-01, -8.31580198e-01,\n",
              "         6.17633832e-01,  4.49274771e-01, -6.06830652e-01],\n",
              "       [ 3.21048387e+01,  6.54812903e+01,  4.90322581e-01,\n",
              "         5.38387097e-01,  5.33225806e-01, -8.32824621e-01,\n",
              "        -8.31580198e-01,  6.17633832e-01, -6.54304468e-01],\n",
              "       [ 3.34089286e+01,  6.66071429e+01,  4.33571429e-01,\n",
              "         4.72142857e-01,  4.70357143e-01, -6.74280723e-01,\n",
              "        -8.32824621e-01, -8.31580198e-01, -1.86677036e-01],\n",
              "       [ 3.56541936e+01,  5.97741935e+01,  3.28064516e-01,\n",
              "         4.39032258e-01,  4.40000000e-01, -8.56452074e-01,\n",
              "        -6.74280723e-01, -8.32824621e-01, -4.07713488e-01],\n",
              "       [ 3.11863333e+01,  8.08030000e+01,  5.87333333e-01,\n",
              "         5.50000000e-01,  5.33000000e-01,  4.81134502e-01,\n",
              "        -8.56452074e-01, -6.74280723e-01,  7.54799829e-01],\n",
              "       [ 2.92451613e+01,  8.67322581e+01,  7.37419355e-01,\n",
              "         7.06129032e-01,  6.85161290e-01,  2.07171715e-01,\n",
              "         4.81134502e-01, -8.56452074e-01,  4.26987161e-01],\n",
              "       [ 2.84723333e+01,  8.77843333e+01,  7.36000000e-01,\n",
              "         7.09000000e-01,  6.85333333e-01,  1.82632756e-01,\n",
              "         2.07171715e-01,  4.81134502e-01,  3.27559695e-01],\n",
              "       [ 2.74516129e+01,  8.98896774e+01,  7.92903226e-01,\n",
              "         7.59677419e-01,  7.30967742e-01,  7.39448496e-01,\n",
              "         1.82632756e-01,  2.07171715e-01,  5.61152725e-01],\n",
              "       [ 2.70554839e+01,  9.03564516e+01,  9.02903226e-01,\n",
              "         9.06774194e-01,  8.78064516e-01,  1.28774651e+00,\n",
              "         7.39448496e-01,  1.82632756e-01,  4.93919484e-01],\n",
              "       [ 2.80246667e+01,  8.94933333e+01,  8.78000000e-01,\n",
              "         8.87666667e-01,  8.54000000e-01,  1.33531583e-01,\n",
              "         1.28774651e+00,  7.39448496e-01, -6.53779041e-02],\n",
              "       [ 2.78632258e+01,  8.81351613e+01,  9.17741935e-01,\n",
              "         9.35806452e-01,  9.11935484e-01,  8.86886921e-01,\n",
              "         1.33531583e-01,  1.28774651e+00,  1.16875912e-01],\n",
              "       [ 2.73396667e+01,  8.69233333e+01,  8.83000000e-01,\n",
              "         8.94333333e-01,  8.64000000e-01,  1.26169859e-01,\n",
              "         8.86886921e-01,  1.33531583e-01, -1.76318203e-01],\n",
              "       [ 2.80380645e+01,  8.29841936e+01,  7.84516129e-01,\n",
              "         7.74193548e-01,  7.49032258e-01, -3.77173459e-01,\n",
              "         1.26169859e-01,  8.86886921e-01, -3.51322444e-01],\n",
              "       [ 3.05922581e+01,  7.01638710e+01,  5.35806452e-01,\n",
              "         5.71935484e-01,  5.65161290e-01, -1.22325478e+00,\n",
              "        -3.77173459e-01,  1.26169859e-01, -7.33793547e-01],\n",
              "       [ 3.39967857e+01,  6.29978571e+01,  4.01428571e-01,\n",
              "         4.65000000e-01,  4.65000000e-01, -1.09387745e+00,\n",
              "        -1.22325478e+00, -3.77173459e-01, -5.34415938e-01],\n",
              "       [ 3.47606452e+01,  6.63125807e+01,  4.24193548e-01,\n",
              "         4.52580645e-01,  4.50967742e-01, -3.39080366e-01,\n",
              "        -1.09387745e+00, -1.22325478e+00,  1.20456562e-01],\n",
              "       [ 3.07450000e+01,  8.08506667e+01,  6.23666667e-01,\n",
              "         5.99666667e-01,  5.82000000e-01,  4.78687037e-01,\n",
              "        -3.39080366e-01, -1.09387745e+00,  6.38452994e-01],\n",
              "       [ 2.85780645e+01,  8.89280645e+01,  8.26451613e-01,\n",
              "         7.94838710e-01,  7.62580645e-01,  8.52652614e-01,\n",
              "         4.78687037e-01, -3.39080366e-01,  5.84280603e-01],\n",
              "       [ 2.80620000e+01,  8.96456667e+01,  8.72666667e-01,\n",
              "         8.72000000e-01,  8.39666667e-01,  7.73351864e-01,\n",
              "         8.52652614e-01,  4.78687037e-01,  3.15264723e-01],\n",
              "       [ 2.76064516e+01,  9.02848387e+01,  8.35483871e-01,\n",
              "         8.33225806e-01,  8.03225806e-01, -6.55822270e-02,\n",
              "         7.73351864e-01,  8.52652614e-01, -1.65292239e-02],\n",
              "       [ 2.82454839e+01,  8.86912903e+01,  7.88709677e-01,\n",
              "         7.60322581e-01,  7.35161290e-01,  5.75652300e-03,\n",
              "        -6.55822270e-02,  7.73351864e-01,  1.58095116e-01],\n",
              "       [ 2.80630000e+01,  8.92743333e+01,  8.32000000e-01,\n",
              "         8.10333333e-01,  7.78333333e-01,  6.54677582e-01,\n",
              "         5.75652300e-03, -6.55822270e-02,  4.50915405e-01],\n",
              "       [ 2.85600000e+01,  8.71519355e+01,  8.86129032e-01,\n",
              "         8.90645161e-01,  8.58387097e-01,  1.00693505e+00,\n",
              "         6.54677582e-01,  5.75652300e-03,  3.36098898e-01],\n",
              "       [ 2.75523333e+01,  8.89883333e+01,  9.20333333e-01,\n",
              "         9.42666667e-01,  9.19333333e-01,  7.30920467e-01,\n",
              "         1.00693505e+00,  6.54677582e-01,  6.32307543e-02],\n",
              "       [ 2.80116129e+01,  8.43067742e+01,  8.52258065e-01,\n",
              "         8.58709677e-01,  8.33225806e-01, -2.75528127e-01,\n",
              "         7.30920467e-01,  1.00693505e+00, -4.52312401e-01],\n",
              "       [ 3.00261290e+01,  7.54961290e+01,  6.32258065e-01,\n",
              "         6.36451613e-01,  6.22903226e-01, -1.13527533e+00,\n",
              "        -2.75528127e-01,  7.30920467e-01, -6.59731732e-01],\n",
              "       [ 3.36255172e+01,  6.76762069e+01,  4.83793103e-01,\n",
              "         5.26206897e-01,  5.21379310e-01, -3.83680636e-01,\n",
              "        -1.13527533e+00, -2.75528127e-01, -1.38871834e-01],\n",
              "       [ 3.53200000e+01,  6.95161290e+01,  4.55483871e-01,\n",
              "         4.80967742e-01,  4.77741935e-01, -3.16112093e-01,\n",
              "        -3.83680636e-01, -1.13527533e+00,  2.12851565e-01],\n",
              "       [ 3.34633333e+01,  7.57276667e+01,  4.85333333e-01,\n",
              "         4.97666667e-01,  4.89000000e-01, -1.40219017e-01,\n",
              "        -3.16112093e-01, -3.83680636e-01,  3.96967631e-01],\n",
              "       [ 2.88470968e+01,  8.77622581e+01,  7.60967742e-01,\n",
              "         7.05161290e-01,  6.76129032e-01,  9.48369594e-01,\n",
              "        -1.40219017e-01, -3.16112093e-01,  7.98477401e-01],\n",
              "       [ 2.75623333e+01,  9.00533333e+01,  8.62333333e-01,\n",
              "         8.61666667e-01,  8.29333333e-01,  7.23046519e-01,\n",
              "         9.48369594e-01, -1.40219017e-01,  3.52926775e-01],\n",
              "       [ 2.72212903e+01,  9.04200000e+01,  8.40322581e-01,\n",
              "         8.40322581e-01,  8.09354839e-01,  2.36231496e-01,\n",
              "         7.23046519e-01,  9.48369594e-01,  9.47861513e-02],\n",
              "       [ 2.78535484e+01,  8.82541935e+01,  7.52903226e-01,\n",
              "         7.35161290e-01,  7.12903226e-01, -1.63409933e-01,\n",
              "         2.36231496e-01,  7.23046519e-01,  8.06786963e-02],\n",
              "       [ 2.90333333e+01,  8.34226667e+01,  5.94000000e-01,\n",
              "         6.09333333e-01,  5.98000000e-01, -5.91369859e-01,\n",
              "        -1.63409933e-01,  2.36231496e-01,  2.70154906e-02],\n",
              "       [ 2.92022581e+01,  8.29658065e+01,  6.61935484e-01,\n",
              "         6.39677419e-01,  6.20000000e-01,  5.12047179e-01,\n",
              "        -5.91369859e-01, -1.63409933e-01,  5.22573443e-01],\n",
              "       [ 2.95696667e+01,  7.88856667e+01,  6.45333333e-01,\n",
              "         6.43666667e-01,  6.28666667e-01, -3.01277044e-01,\n",
              "         5.12047179e-01, -5.91369859e-01, -6.70644087e-02],\n",
              "       [ 3.18787097e+01,  6.80790323e+01,  4.67096774e-01,\n",
              "         5.17419355e-01,  5.13548387e-01, -8.54497022e-01,\n",
              "        -3.01277044e-01,  5.12047179e-01, -5.20997792e-01],\n",
              "       [ 3.30332258e+01,  6.17045161e+01,  3.92580645e-01,\n",
              "         4.50967742e-01,  4.51612903e-01, -8.85562589e-01,\n",
              "        -8.54497022e-01, -3.01277044e-01, -5.42811338e-01],\n",
              "       [ 3.44242857e+01,  5.96317857e+01,  2.89642857e-01,\n",
              "         4.30357143e-01,  4.31785714e-01, -9.79519825e-01,\n",
              "        -8.85562589e-01, -8.54497022e-01, -4.94630478e-01],\n",
              "       [ 3.36529032e+01,  7.25590323e+01,  4.93548387e-01,\n",
              "         5.06451613e-01,  4.98064516e-01,  1.15953237e-01,\n",
              "        -9.79519825e-01, -8.85562589e-01,  4.31851185e-01],\n",
              "       [ 3.26760000e+01,  7.67693333e+01,  4.96000000e-01,\n",
              "         5.18000000e-01,  5.09666667e-01, -2.10322393e-01,\n",
              "         1.15953237e-01, -9.79519825e-01,  3.63412123e-01],\n",
              "       [ 2.92329032e+01,  8.54945161e+01,  6.76451613e-01,\n",
              "         6.44193548e-01,  6.22903226e-01,  6.82964790e-01,\n",
              "        -2.10322393e-01,  1.15953237e-01,  6.77775640e-01],\n",
              "       [ 2.78226667e+01,  8.97240000e+01,  8.02000000e-01,\n",
              "         7.77333333e-01,  7.47333333e-01,  6.23388224e-01,\n",
              "         6.82964790e-01, -2.10322393e-01,  4.92877346e-01],\n",
              "       [ 2.80309677e+01,  8.96109677e+01,  7.88064516e-01,\n",
              "         7.68387097e-01,  7.42580645e-01,  6.49930280e-02,\n",
              "         6.23388224e-01,  6.82964790e-01,  1.80808515e-01],\n",
              "       [ 2.76148387e+01,  9.04693548e+01,  8.10967742e-01,\n",
              "         7.89354839e-01,  7.60322581e-01,  4.93451677e-01,\n",
              "         6.49930280e-02,  6.23388224e-01,  3.94222013e-01],\n",
              "       [ 2.78026667e+01,  8.98753333e+01,  8.67333333e-01,\n",
              "         8.69333333e-01,  8.35666667e-01,  6.82600312e-01,\n",
              "         4.93451677e-01,  6.49930280e-02,  3.28952250e-01],\n",
              "       [ 2.78700000e+01,  8.88141935e+01,  8.87741935e-01,\n",
              "         8.91612903e-01,  8.60000000e-01,  8.38014732e-01,\n",
              "         6.82600312e-01,  4.93451677e-01,  2.61217060e-01],\n",
              "       [ 2.80990000e+01,  8.64076667e+01,  8.95333333e-01,\n",
              "         9.10333333e-01,  8.83000000e-01,  7.22771016e-01,\n",
              "         8.38014732e-01,  6.82600312e-01,  3.62978772e-02],\n",
              "       [ 2.79196774e+01,  8.12745161e+01,  8.01290323e-01,\n",
              "         7.99032258e-01,  7.73870968e-01, -7.85410334e-01,\n",
              "         7.22771016e-01,  8.38014732e-01, -7.03021139e-01],\n",
              "       [ 3.05487097e+01,  6.98251613e+01,  5.58064516e-01,\n",
              "         5.83870968e-01,  5.75806452e-01, -1.00000214e+00,\n",
              "        -7.85410334e-01,  7.22771016e-01, -7.08286551e-01],\n",
              "       [ 3.48457143e+01,  5.90267857e+01,  4.02142857e-01,\n",
              "         4.77857143e-01,  4.78214286e-01, -1.08080670e+00,\n",
              "        -1.00000214e+00, -7.85410334e-01, -6.76245735e-01],\n",
              "       [ 3.35148387e+01,  7.03735484e+01,  4.45806452e-01,\n",
              "         4.64838710e-01,  4.61935484e-01, -3.75279451e-01,\n",
              "        -1.08080670e+00, -1.00000214e+00,  1.85920028e-01],\n",
              "       [ 3.21360000e+01,  7.84096667e+01,  5.10666667e-01,\n",
              "         5.14000000e-01,  5.04666667e-01, -6.34178100e-03,\n",
              "        -3.75279451e-01, -1.08080670e+00,  5.51175402e-01],\n",
              "       [ 2.89503226e+01,  8.67767742e+01,  6.71612903e-01,\n",
              "         6.34516129e-01,  6.13548387e-01,  5.44592961e-01,\n",
              "        -6.34178100e-03, -3.75279451e-01,  7.11718018e-01],\n",
              "       [ 2.75510000e+01,  8.99720000e+01,  8.33000000e-01,\n",
              "         8.06666667e-01,  7.77333333e-01,  8.32193445e-01,\n",
              "         5.44592961e-01, -6.34178100e-03,  5.15774353e-01],\n",
              "       [ 2.68345161e+01,  9.21129032e+01,  9.01935484e-01,\n",
              "         9.09354839e-01,  8.78709677e-01,  1.07358887e+00,\n",
              "         8.32193445e-01,  5.44592961e-01,  4.33940642e-01],\n",
              "       [ 2.72448387e+01,  9.01696774e+01,  8.96774194e-01,\n",
              "         9.14838710e-01,  8.89677419e-01,  6.69689576e-01,\n",
              "         1.07358887e+00,  8.32193445e-01,  1.20195045e-01],\n",
              "       [ 2.85550000e+01,  8.79820000e+01,  8.34000000e-01,\n",
              "         8.15333333e-01,  7.84666667e-01,  2.78588067e-01,\n",
              "         6.69689576e-01,  1.07358887e+00,  9.97104837e-02],\n",
              "       [ 2.80951613e+01,  8.64264516e+01,  8.97096774e-01,\n",
              "         9.10322581e-01,  8.82258065e-01,  7.89691627e-01,\n",
              "         2.78588067e-01,  6.69689576e-01,  9.70593943e-02],\n",
              "       [ 2.85893333e+01,  8.46946667e+01,  8.51666667e-01,\n",
              "         8.55000000e-01,  8.24333333e-01,  1.55432300e-02,\n",
              "         7.89691627e-01,  2.78588067e-01, -2.02917103e-01],\n",
              "       [ 2.91461290e+01,  7.65648387e+01,  6.75161290e-01,\n",
              "         6.70645161e-01,  6.56451613e-01, -8.81384304e-01,\n",
              "         1.55432300e-02,  7.89691627e-01, -6.23945420e-01],\n",
              "       [ 3.30361290e+01,  6.37867742e+01,  4.51935484e-01,\n",
              "         5.08064516e-01,  5.05483871e-01, -1.28547021e+00,\n",
              "        -8.81384304e-01,  1.55432300e-02, -7.80720563e-01],\n",
              "       [ 3.56900000e+01,  6.10667857e+01,  3.39642857e-01,\n",
              "         4.42500000e-01,  4.42857143e-01, -9.03388006e-01,\n",
              "        -1.28547021e+00, -8.81384304e-01, -3.39423992e-01],\n",
              "       [ 3.69587097e+01,  5.95083871e+01,  3.29354839e-01,\n",
              "         4.34838710e-01,  4.36774194e-01, -6.03904008e-01,\n",
              "        -9.03388006e-01, -1.28547021e+00, -1.69475333e-01],\n",
              "       [ 3.36850000e+01,  7.25913333e+01,  4.53333333e-01,\n",
              "         4.86333333e-01,  4.80333333e-01, -7.54070230e-02,\n",
              "        -6.03904008e-01, -9.03388006e-01,  3.75274836e-01],\n",
              "       [ 3.08903226e+01,  8.16854839e+01,  5.40967742e-01,\n",
              "         5.31290323e-01,  5.19677419e-01, -8.98031970e-02,\n",
              "        -7.54070230e-02, -6.03904008e-01,  5.08965792e-01],\n",
              "       [ 2.89363333e+01,  8.69496667e+01,  7.07333333e-01,\n",
              "         6.75666667e-01,  6.57333333e-01,  3.64062607e-01,\n",
              "        -8.98031970e-02, -7.54070230e-02,  5.20890691e-01],\n",
              "       [ 2.80054839e+01,  8.83612903e+01,  7.63225806e-01,\n",
              "         7.25161290e-01,  6.98709677e-01,  5.09504859e-01,\n",
              "         3.64062607e-01, -8.98031970e-02,  4.91512489e-01],\n",
              "       [ 2.73454839e+01,  9.03164516e+01,  8.86774194e-01,\n",
              "         8.93225806e-01,  8.61290323e-01,  1.16864997e+00,\n",
              "         5.09504859e-01,  3.64062607e-01,  4.80717645e-01],\n",
              "       [ 2.80486667e+01,  8.89936667e+01,  8.94333333e-01,\n",
              "         9.08333333e-01,  8.80000000e-01,  6.70142936e-01,\n",
              "         1.16864997e+00,  5.09504859e-01,  1.38204173e-01],\n",
              "       [ 2.80225806e+01,  8.82412903e+01,  9.32258065e-01,\n",
              "         9.52903226e-01,  9.31612903e-01,  1.20155328e+00,\n",
              "         6.70142936e-01,  1.16864997e+00,  2.22549503e-01],\n",
              "       [ 2.87276667e+01,  8.66510000e+01,  8.83666667e-01,\n",
              "         8.96000000e-01,  8.66333333e-01,  2.65235335e-01,\n",
              "         1.20155328e+00,  6.70142936e-01, -1.21176044e-01],\n",
              "       [ 2.89051613e+01,  8.43193548e+01,  7.66451613e-01,\n",
              "         7.51935484e-01,  7.30000000e-01, -4.44879509e-01,\n",
              "         2.65235335e-01,  1.20155328e+00, -2.68263167e-01],\n",
              "       [ 3.20180645e+01,  6.95825806e+01,  5.20322581e-01,\n",
              "         5.60000000e-01,  5.55161290e-01, -1.05591053e+00,\n",
              "        -4.44879509e-01,  2.65235335e-01, -6.01284334e-01],\n",
              "       [ 3.48082759e+01,  6.33496552e+01,  4.07586207e-01,\n",
              "         4.65172414e-01,  4.65517241e-01, -7.10991851e-01,\n",
              "        -1.05591053e+00, -4.44879509e-01, -2.99532566e-01],\n",
              "       [ 3.61138710e+01,  6.25035484e+01,  3.88064516e-01,\n",
              "         4.46129032e-01,  4.46451613e-01, -4.12820575e-01,\n",
              "        -7.10991851e-01, -1.05591053e+00, -4.51011626e-02],\n",
              "       [ 3.38393333e+01,  7.36713333e+01,  4.94000000e-01,\n",
              "         4.85000000e-01,  4.77666667e-01,  7.77143800e-03,\n",
              "        -4.12820575e-01, -7.10991851e-01,  4.42289358e-01],\n",
              "       [ 2.90916129e+01,  8.70987097e+01,  7.81290323e-01,\n",
              "         7.37096774e-01,  7.09032258e-01,  1.10160729e+00,\n",
              "         7.77143800e-03, -4.12820575e-01,  7.84804349e-01],\n",
              "       [ 2.77590000e+01,  8.95363333e+01,  8.36333333e-01,\n",
              "         8.25333333e-01,  7.95000000e-01,  4.42576437e-01,\n",
              "         1.10160729e+00,  7.77143800e-03,  2.58666574e-01],\n",
              "       [ 2.71612903e+01,  9.10945161e+01,  8.70322581e-01,\n",
              "         8.64838710e-01,  8.31612903e-01,  7.64291083e-01,\n",
              "         4.42576437e-01,  1.10160729e+00,  3.23869327e-01],\n",
              "       [ 2.78654839e+01,  9.01612903e+01,  8.77741935e-01,\n",
              "         8.83870968e-01,  8.53548387e-01,  3.69388768e-01,\n",
              "         7.64291083e-01,  4.42576437e-01,  1.22252427e-01],\n",
              "       [ 2.73363333e+01,  9.03540000e+01,  9.07000000e-01,\n",
              "         9.25666667e-01,  8.98333333e-01,  8.09937449e-01,\n",
              "         3.69388768e-01,  7.64291083e-01,  2.18597171e-01],\n",
              "       [ 2.84841936e+01,  8.71612903e+01,  8.73225806e-01,\n",
              "         8.81290323e-01,  8.49354839e-01,  4.16695137e-01,\n",
              "         8.09937449e-01,  3.69388768e-01,  3.90761960e-02],\n",
              "       [ 2.80736667e+01,  8.70033333e+01,  8.61000000e-01,\n",
              "         8.63333333e-01,  8.29000000e-01,  3.22232862e-01,\n",
              "         4.16695137e-01,  8.09937449e-01, -9.10783557e-03],\n",
              "       [ 2.79693548e+01,  8.48080645e+01,  7.72580645e-01,\n",
              "         7.46451613e-01,  7.23548387e-01, -2.68342284e-01,\n",
              "         3.22232862e-01,  4.16695137e-01, -1.35167974e-01],\n",
              "       [ 2.83090323e+01,  8.12329032e+01,  7.51612903e-01,\n",
              "         7.35806452e-01,  7.13225806e-01, -1.22583835e-01,\n",
              "        -2.68342284e-01,  3.22232862e-01, -1.62959561e-01],\n",
              "       [ 3.26664286e+01,  6.82367857e+01,  4.98571429e-01,\n",
              "         5.42857143e-01,  5.37500000e-01, -1.03677953e+00,\n",
              "        -1.22583835e-01, -2.68342284e-01, -5.54032767e-01],\n",
              "       [ 3.38212903e+01,  6.93161290e+01,  4.73225806e-01,\n",
              "         5.01290323e-01,  4.95161290e-01, -2.22978887e-01,\n",
              "        -1.03677953e+00, -1.22583835e-01,  6.24211857e-02],\n",
              "       [ 3.01210000e+01,  8.44146667e+01,  6.72000000e-01,\n",
              "         6.34000000e-01,  6.13666667e-01,  5.57006955e-01,\n",
              "        -2.22978887e-01, -1.03677953e+00,  7.30831379e-01],\n",
              "       [ 2.80645161e+01,  9.06187097e+01,  9.19677419e-01,\n",
              "         9.27096774e-01,  8.95483871e-01,  1.71250086e+00,\n",
              "         5.57006955e-01, -2.22978887e-01,  7.60030173e-01],\n",
              "       [ 2.76793333e+01,  9.04433333e+01,  8.96666667e-01,\n",
              "         9.13000000e-01,  8.83333333e-01,  4.39844260e-01,\n",
              "         1.71250086e+00,  5.57006955e-01,  4.52173384e-02],\n",
              "       [ 2.74961290e+01,  9.06064516e+01,  8.79032258e-01,\n",
              "         8.90322581e-01,  8.60322581e-01,  4.64588975e-01,\n",
              "         4.39844260e-01,  1.71250086e+00,  7.53485521e-02],\n",
              "       [ 2.74983871e+01,  9.01680645e+01,  8.63548387e-01,\n",
              "         8.64838710e-01,  8.32580645e-01,  5.61400030e-01,\n",
              "         4.64588975e-01,  4.39844260e-01,  2.50861800e-01],\n",
              "       [ 2.78046667e+01,  9.07756667e+01,  8.86000000e-01,\n",
              "         8.92000000e-01,  8.59000000e-01,  7.74937890e-01,\n",
              "         5.61400030e-01,  4.64588975e-01,  3.34085028e-01],\n",
              "       [ 2.73570968e+01,  9.06861290e+01,  9.45483871e-01,\n",
              "         9.62258065e-01,  9.45806452e-01,  1.48705562e+00,\n",
              "         7.74937890e-01,  5.61400030e-01,  4.59537700e-01],\n",
              "       [ 2.76733333e+01,  8.94326667e+01,  9.53333333e-01,\n",
              "         9.72666667e-01,  9.60333333e-01,  1.47304689e+00,\n",
              "         1.48705562e+00,  7.74937890e-01,  3.29619489e-01]])"
            ]
          },
          "metadata": {},
          "execution_count": 550
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gf = pd.DataFrame(testTrue)\n",
        "gf "
      ],
      "metadata": {
        "id": "eJTBu4_uMaKE",
        "outputId": "895e5cae-b693-4f6e-b145-ea3107428fbd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 673
        }
      },
      "execution_count": 551,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            0          1         2         3         4         5         6  \\\n",
              "0   27.315161  90.332258  0.869355  0.878065  0.848710  0.079143  1.007382   \n",
              "1   27.934000  88.403000  0.830000  0.825000  0.793333  0.241357  0.079143   \n",
              "2   27.941935  87.290323  0.820645  0.799677  0.769677  0.449275  0.241357   \n",
              "3   28.120000  85.098333  0.855000  0.849000  0.815667  0.617634  0.449275   \n",
              "4   28.333548  78.657097  0.714194  0.704839  0.686452 -0.831580  0.617634   \n",
              "..        ...        ...       ...       ...       ...       ...       ...   \n",
              "95  27.496129  90.606452  0.879032  0.890323  0.860323  0.464589  0.439844   \n",
              "96  27.498387  90.168065  0.863548  0.864839  0.832581  0.561400  0.464589   \n",
              "97  27.804667  90.775667  0.886000  0.892000  0.859000  0.774938  0.561400   \n",
              "98  27.357097  90.686129  0.945484  0.962258  0.945806  1.487056  0.774938   \n",
              "99  27.673333  89.432667  0.953333  0.972667  0.960333  1.473047  1.487056   \n",
              "\n",
              "           7         8  \n",
              "0   1.486533 -0.112770  \n",
              "1   1.007382  0.090904  \n",
              "2   0.079143  0.248557  \n",
              "3   0.241357  0.109192  \n",
              "4   0.449275 -0.606831  \n",
              "..       ...       ...  \n",
              "95  1.712501  0.075349  \n",
              "96  0.439844  0.250862  \n",
              "97  0.464589  0.334085  \n",
              "98  0.561400  0.459538  \n",
              "99  0.774938  0.329619  \n",
              "\n",
              "[100 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bbbf231a-af8a-4086-b685-ff76df3b86cc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>27.315161</td>\n",
              "      <td>90.332258</td>\n",
              "      <td>0.869355</td>\n",
              "      <td>0.878065</td>\n",
              "      <td>0.848710</td>\n",
              "      <td>0.079143</td>\n",
              "      <td>1.007382</td>\n",
              "      <td>1.486533</td>\n",
              "      <td>-0.112770</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>27.934000</td>\n",
              "      <td>88.403000</td>\n",
              "      <td>0.830000</td>\n",
              "      <td>0.825000</td>\n",
              "      <td>0.793333</td>\n",
              "      <td>0.241357</td>\n",
              "      <td>0.079143</td>\n",
              "      <td>1.007382</td>\n",
              "      <td>0.090904</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>27.941935</td>\n",
              "      <td>87.290323</td>\n",
              "      <td>0.820645</td>\n",
              "      <td>0.799677</td>\n",
              "      <td>0.769677</td>\n",
              "      <td>0.449275</td>\n",
              "      <td>0.241357</td>\n",
              "      <td>0.079143</td>\n",
              "      <td>0.248557</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>28.120000</td>\n",
              "      <td>85.098333</td>\n",
              "      <td>0.855000</td>\n",
              "      <td>0.849000</td>\n",
              "      <td>0.815667</td>\n",
              "      <td>0.617634</td>\n",
              "      <td>0.449275</td>\n",
              "      <td>0.241357</td>\n",
              "      <td>0.109192</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>28.333548</td>\n",
              "      <td>78.657097</td>\n",
              "      <td>0.714194</td>\n",
              "      <td>0.704839</td>\n",
              "      <td>0.686452</td>\n",
              "      <td>-0.831580</td>\n",
              "      <td>0.617634</td>\n",
              "      <td>0.449275</td>\n",
              "      <td>-0.606831</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>27.496129</td>\n",
              "      <td>90.606452</td>\n",
              "      <td>0.879032</td>\n",
              "      <td>0.890323</td>\n",
              "      <td>0.860323</td>\n",
              "      <td>0.464589</td>\n",
              "      <td>0.439844</td>\n",
              "      <td>1.712501</td>\n",
              "      <td>0.075349</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>27.498387</td>\n",
              "      <td>90.168065</td>\n",
              "      <td>0.863548</td>\n",
              "      <td>0.864839</td>\n",
              "      <td>0.832581</td>\n",
              "      <td>0.561400</td>\n",
              "      <td>0.464589</td>\n",
              "      <td>0.439844</td>\n",
              "      <td>0.250862</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>27.804667</td>\n",
              "      <td>90.775667</td>\n",
              "      <td>0.886000</td>\n",
              "      <td>0.892000</td>\n",
              "      <td>0.859000</td>\n",
              "      <td>0.774938</td>\n",
              "      <td>0.561400</td>\n",
              "      <td>0.464589</td>\n",
              "      <td>0.334085</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>27.357097</td>\n",
              "      <td>90.686129</td>\n",
              "      <td>0.945484</td>\n",
              "      <td>0.962258</td>\n",
              "      <td>0.945806</td>\n",
              "      <td>1.487056</td>\n",
              "      <td>0.774938</td>\n",
              "      <td>0.561400</td>\n",
              "      <td>0.459538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>27.673333</td>\n",
              "      <td>89.432667</td>\n",
              "      <td>0.953333</td>\n",
              "      <td>0.972667</td>\n",
              "      <td>0.960333</td>\n",
              "      <td>1.473047</td>\n",
              "      <td>1.487056</td>\n",
              "      <td>0.774938</td>\n",
              "      <td>0.329619</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 9 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bbbf231a-af8a-4086-b685-ff76df3b86cc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bbbf231a-af8a-4086-b685-ff76df3b86cc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bbbf231a-af8a-4086-b685-ff76df3b86cc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 551
        }
      ]
    }
  ]
}
